// Generated by LiveScript 1.2.0
(function(){
  var Debugger, RulesFileLoader, RulesLoader, toString$ = {}.toString;
  Debugger = require('../../../util').Debugger;
  Array.prototype.contains = function(v){
    return this.indexOf(v) > -1;
  };
  RulesFileLoader = require('./rules_file_loader');
  module.exports = RulesLoader = (function(){
    RulesLoader.displayName = 'RulesLoader';
    var prototype = RulesLoader.prototype, constructor = RulesLoader;
    importAll$(prototype, arguments[0]);
    function RulesLoader(filePath, options){
      this.filePath = filePath;
      this.options = options != null
        ? options
        : {};
      this.loadedRules = {};
      this.fileLoader = new RulesFileLoader(this.filePath, this.loadedRulesCallback, this.options);
    }
    prototype.load = function(async){
      return this.fileLoader.loadRules(async);
    };
    prototype.loadedRulesCallback = function(rules){
      this.loadedRules = rules;
      return this.processRules();
    };
    prototype.processRules = function(){
      var key, ref$, rule;
      this.debug("processRules", this.loadedRules);
      if (toString$.call(this.loadedRules).slice(8, -1) !== 'Object') {
        throw Error("Rules not loaded or invalid: " + this.loadedRules);
      }
      this.processedRules = {};
      for (key in ref$ = this.loadedRules) {
        rule = ref$[key];
        this.processRule(key, rule);
      }
      return this.rules();
    };
    prototype.processRule = function(key, rule){
      throw Error("Not implemented");
    };
    prototype.createRulesAt = function(container, key){
      if (toString$.call(container).slice(8, -1) !== 'Object') {
        throw Error("Not a rule container, was: " + container);
      }
      if (key != null) {
        return container[key] = this.rules();
      } else {
        return container = this.rules();
      }
    };
    prototype.rules = function(){
      return this.processedRules;
    };
    return RulesLoader;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
